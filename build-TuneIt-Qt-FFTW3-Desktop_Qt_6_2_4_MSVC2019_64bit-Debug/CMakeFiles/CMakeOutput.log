The system is: Windows - 10.0.19043 - AMD64
Compiling the CXX compiler identification source file "CMakeCXXCompilerId.cpp" succeeded.
Compiler: C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.29.30133/bin/HostX64/x64/cl.exe 
Build flags: -DQT_QML_DEBUG
Id flags:  

The output was:
0
Microsoft (R) C/C++ Optimizing Compiler Version 19.29.30138 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

CMakeCXXCompilerId.cpp
Microsoft (R) Incremental Linker Version 14.29.30138.0
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:CMakeCXXCompilerId.exe 
CMakeCXXCompilerId.obj 


Compilation of the CXX compiler identification source "CMakeCXXCompilerId.cpp" produced "CMakeCXXCompilerId.exe"

Compilation of the CXX compiler identification source "CMakeCXXCompilerId.cpp" produced "CMakeCXXCompilerId.obj"

The CXX compiler identification is MSVC, found in "E:/Documents/projects/TuneIt-Qt-FFTW3/build-TuneIt-Qt-FFTW3-Desktop_Qt_6_2_4_MSVC2019_64bit-Debug/CMakeFiles/3.21.21080301-MSVC_2/CompilerIdCXX/CMakeCXXCompilerId.exe"

Compiling the C compiler identification source file "CMakeCCompilerId.c" succeeded.
Compiler: C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.29.30133/bin/HostX64/x64/cl.exe 
Build flags: 
Id flags:  

The output was:
0
Microsoft (R) C/C++ Optimizing Compiler Version 19.29.30138 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

CMakeCCompilerId.c
Microsoft (R) Incremental Linker Version 14.29.30138.0
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:CMakeCCompilerId.exe 
CMakeCCompilerId.obj 


Compilation of the C compiler identification source "CMakeCCompilerId.c" produced "CMakeCCompilerId.exe"

Compilation of the C compiler identification source "CMakeCCompilerId.c" produced "CMakeCCompilerId.obj"

The C compiler identification is MSVC, found in "E:/Documents/projects/TuneIt-Qt-FFTW3/build-TuneIt-Qt-FFTW3-Desktop_Qt_6_2_4_MSVC2019_64bit-Debug/CMakeFiles/3.21.21080301-MSVC_2/CompilerIdC/CMakeCCompilerId.exe"

Detecting CXX compiler ABI info compiled with the following output:
Change Dir: E:/Documents/projects/TuneIt-Qt-FFTW3/build-TuneIt-Qt-FFTW3-Desktop_Qt_6_2_4_MSVC2019_64bit-Debug/CMakeFiles/CMakeTmp

Run Build Command(s):C:/Users/ben/Downloads/ninja-win/ninja.exe cmTC_4aff8 && [1/2] Building CXX object CMakeFiles\cmTC_4aff8.dir\CMakeCXXCompilerABI.cpp.obj
[2/2] Linking CXX executable cmTC_4aff8.exe



Detecting C compiler ABI info compiled with the following output:
Change Dir: E:/Documents/projects/TuneIt-Qt-FFTW3/build-TuneIt-Qt-FFTW3-Desktop_Qt_6_2_4_MSVC2019_64bit-Debug/CMakeFiles/CMakeTmp

Run Build Command(s):C:/Users/ben/Downloads/ninja-win/ninja.exe cmTC_b4135 && [1/2] Building C object CMakeFiles\cmTC_b4135.dir\CMakeCCompilerABI.c.obj
[2/2] Linking C executable cmTC_b4135.exe



Performing C++ SOURCE FILE Test HAVE_STDATOMIC succeeded with the following output:
Change Dir: E:/Documents/projects/TuneIt-Qt-FFTW3/build-TuneIt-Qt-FFTW3-Desktop_Qt_6_2_4_MSVC2019_64bit-Debug/CMakeFiles/CMakeTmp

Run Build Command(s):C:/Users/ben/Downloads/ninja-win/ninja.exe cmTC_e7354 && [1/2] Building CXX object CMakeFiles\cmTC_e7354.dir\src.cxx.obj
E:\Documents\projects\TuneIt-Qt-FFTW3\build-TuneIt-Qt-FFTW3-Desktop_Qt_6_2_4_MSVC2019_64bit-Debug\CMakeFiles\CMakeTmp\src.cxx(17): warning C4312: 'type cast': conversion from 'unsigned int' to 'void *' of greater size
[2/2] Linking CXX executable cmTC_e7354.exe


Source file was:
#include <atomic>
#include <cstdint>

void test(volatile std::atomic<std::int64_t> &a)
{
    std::int64_t v = a.load(std::memory_order_acquire);
    while (!a.compare_exchange_strong(v, v + 1,
                                      std::memory_order_acq_rel,
                                      std::memory_order_acquire)) {
        v = a.exchange(v - 1);
    }
    a.store(v + 1, std::memory_order_release);
}

int main(int, char **)
{
    void *ptr = (void*)0xffffffc0; // any random pointer
    test(*reinterpret_cast<std::atomic<std::int64_t> *>(ptr));
    return 0;
}
